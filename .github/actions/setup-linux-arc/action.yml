name: Setup Linux

description: Set up Docker workspace on EC2

runs:
  using: composite
  steps:
    - name: Start docker if docker deamon is not running
      shell: bash
      run: |
        docker info > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "Docker is running."
        else
            echo "Docker is not running."
        fi

    - name: Install AWS CLI v2
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
      shell: bash

    - name: Log in to ECR
      uses: nick-fields/retry@3e91a01664abd3c5cd539100d10d33b9c5b68482
      env:
        AWS_RETRY_MODE: standard
        AWS_MAX_ATTEMPTS: "5"
        AWS_DEFAULT_REGION: us-east-1
      with:
        shell: bash
        timeout_minutes: 5
        max_attempts: 3
        retry_wait_seconds: 30
        command: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity|grep Account|cut -f4 -d\")
          aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS \
              --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"

    - name: Preserve github env variables for use in docker
      shell: bash
      run: |
        env | grep '^GITHUB' >> "/tmp/github_env_${GITHUB_RUN_ID}"
        env | grep '^CI' >> "/tmp/github_env_${GITHUB_RUN_ID}"

    - name: Kill any existing containers, clean up images
      shell: bash
      run: |
        # ignore expansion of "docker ps -q" since it could be empty
        # shellcheck disable=SC2046
        docker stop $(docker ps -q) || true
        # Prune all of the docker images
        docker system prune -af

    - name: Manually resolve download.pytorch.org
      shell: bash
      continue-on-error: true
      run: |
        set +e
        set -x

        PT_DOMAIN=download.pytorch.org
        # TODO: Flaky access to download.pytorch.org https://github.com/pytorch/pytorch/issues/100400,
        # cleaning this up once the issue is fixed. There are more than one resolved IP here, the last
        # one is returned at random
        RESOLVED_IP=$(dig -4 +short "${PT_DOMAIN}" | tail -n1)

        if [ -z "${RESOLVED_IP}" ]; then
          echo "Couldn't resolve ${PT_DOMAIN}, retrying with Google DNS..."
          RESOLVED_IP=$(dig -4 +short "${PT_DOMAIN}" @8.8.8.8 | tail -n1)

          if [ -z "${RESOLVED_IP}" ]; then
            echo "Couldn't resolve ${PT_DOMAIN}, exiting..."
            exit 1
          fi
        fi

        if grep -r "${PT_DOMAIN}" /etc/hosts; then
          # Clean up any old records first
          sudo sed -i "/${PT_DOMAIN}/d" /etc/hosts
        fi

        echo "${RESOLVED_IP} ${PT_DOMAIN}" | sudo tee -a /etc/hosts
        cat /etc/hosts
